{"head":{"layout":"Post","comments":true,"date":"2016-10-06","title":"Github pages deploy","tags":["github","gh-pages"],"authors":["CleanCoderCo"],"description":"source: https&#x3A;//help.github.com/articles/user-organization-and-project-pages/ blog starter kit:…"},"body":"<p>source: <a href=\"https://help.github.com/articles/user-organization-and-project-pages/\">https://help.github.com/articles/user-organization-and-project-pages/</a></p>\n<p>blog starter kit: <a href=\"https://github.com/gatsbyjs/gatsby\">https://github.com/gatsbyjs/gatsby</a></p>\n<h2 id=\"userorganization-와-project-pages\"><a href=\"#userorganization-%EC%99%80-project-pages\" class=\"phenomic-HeadingAnchor\">#</a>User/Organization 와 Project Pages</h2>\n<p>Github 페이지는 2가지 기본 타입이 존재한다 : User/Organization 페이지와 프로젝트 페이지.</p>\n<p>이것들은 거의 동일하지만, 이들 사이에는 몇 가지 중요한 차이점이 있다.</p>\n<p>2016년 7월 15일 이후에 생성되고, <code>github.io</code> 도메인을 사용하는 Github 페이지는 <code>https</code> 상에서 수행된다.</p>\n<blockquote>\n<p>Tip: GitHub Pages sites shouldn't be used for sensitive transactions like sending passwords or credit card numbers.</p>\n</blockquote>\n<p>페이지는 퍼블리시될때 저장소가 <code>private</code> 할지라도, 항상 공개적으로 접근가능하다는 점을 명심하라.</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">타입</th>\n<th align=\"left\">페이지 도메인 &#x26; Github 저장소 이름</th>\n<th align=\"center\">페이지 사이트 생성을 위한 소스파일 위치</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\">일반유저계정 페이지</td>\n<td align=\"left\"><code>username.github.io</code></td>\n<td align=\"center\"><code>master</code></td>\n</tr>\n<tr>\n<td align=\"center\">회사계정 페이지</td>\n<td align=\"left\"><code>organizationName.github.io</code></td>\n<td align=\"center\"><code>master</code></td>\n</tr>\n<tr>\n<td align=\"center\">일반유저가 소유한 프로젝트 페이지</td>\n<td align=\"left\"><code>username.github.io/projectName</code></td>\n<td align=\"center\"><code>master</code>\n, \n<code>gh-pages</code>\n, 또는 \n<code>master</code>\n 브랜치의 \n<code>/docs</code>\n 폴더</td>\n</tr>\n<tr>\n<td align=\"center\">회사가 소유한 프로젝트 페이지</td>\n<td align=\"left\"><code>organizationName.github.io/prjectName</code></td>\n<td align=\"center\"><code>master</code>\n, \n<code>gh-pages</code>\n, 또는 \n<code>master</code>\n 브랜치의 \n<code>/docs</code>\n 폴더</td>\n</tr>\n</tbody>\n</table>\n<p>Github 페이지 사이트를 커스텀 도메인으로 리디렉션 하는 방법을 배우려면, <a href=\"https://help.github.com/articles/custom-domain-redirects-for-github-pages-sites\">커스텀 도메인 리디렉션 차트</a>를 봐라.</p>\n<h3 id=\"user--organization-페이지\"><a href=\"#user--organization-%ED%8E%98%EC%9D%B4%EC%A7%80\" class=\"phenomic-HeadingAnchor\">#</a>User &#x26; Organization 페이지</h3>\n<p>User &#x26; Organization 페이지는 Github 페이지 파일 전용의 특별한 저장소에 존재하게 된다. 이 저장소 이름을 계정이름으로 네이밍해야할 것이다.</p>\n<p>반드시 저장소 이름을 <code>username.github.io</code>로 해야한다. <code>master</code> 브랜치에 있는 컨텐츠가 Github 페이지 사이트를 생성하고 퍼블리시하는 데 사용된다. User &#x26; Organization 페이지를 위해 오직 자신의 계정이름을 사용할 수 있다.</p>\n<p>유저 페이지가 생성되면, <code>http(s)://&#x3C;username>.github.io</code> 주소가 이용가능할 것이다.</p>\n<h4 id=\"user--organization-페이지-만들기\"><a href=\"#user--organization-%ED%8E%98%EC%9D%B4%EC%A7%80-%EB%A7%8C%EB%93%A4%EA%B8%B0\" class=\"phenomic-HeadingAnchor\">#</a>User &#x26; Organization 페이지 만들기</h4>\n<p>회원가입 후 이메일 인증을 한 유저는 유저 페이지를 생성할 수 있다.</p>\n<p>페이지는 또한 <a href=\"https://developer.github.com/guides/managing-deploy-keys/#deploy-keys\">배포 키</a>를 사용해서 프로세스를 자동화할 수 있다.</p>\n<p>회사 페이지는 인증된 이메일 주소와 저장소에 푸시 권한을 가지고 있는 멤버 누구라도 만들 수 있다. 빌드 자동화를 위해, <a href=\"https://developer.github.com/guides/managing-deploy-keys/#machine-users\">당신의 조직을 하나의 멤버로써 머신 유저를 셋팅</a>할 수 있다. 배포 키는 조직 페이지를 위해 지원되지 않는다.</p>\n<h3 id=\"프로젝트-페이지\"><a href=\"#%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%ED%8E%98%EC%9D%B4%EC%A7%80\" class=\"phenomic-HeadingAnchor\">#</a>프로젝트 페이지</h3>\n<p>유저와 회사 페이지와 달리, 프로젝트 페이지는 해당 프로젝트와 동일한 저장소에 유지된다. 일반유저 계정과 조직 계정은 프로젝트 페이지를 생성할 수 있다. 개인 개정의 프로젝트 페이지에 대한 URL은 <code>http(s)://&#x3C;username>.github.io/&#x3C;projectName></code> 인 반면, 조직계정의 프로젝트 페이지 URL은 <code>http(s)://&#x3C;organization>.github.io/&#x3C;projectName></code> 일 것이다. 프로젝트 페이지에 대한 단계는 둘 다 같다.</p>\n<p>프로젝트 페이지는 유저와 조직 페이지에서 유사하지만 약간의 차이가 있다.</p>\n<blockquote>\n<p>프로젝트 페이지 사이트를 <code>master</code> 또는 <code>gh-pages</code> 브랜치로부터 생성하고 퍼블리시 할 수 있다. <code>master</code> 브랜치상에서 퍼블리시 하려면 <code>/docs</code> 폴더로부터 사이트를 퍼블리시 해야한다. 더 많은 정보를 위해 <a href=\"https://help.github.com/articles/configuring-a-publishing-source-for-github-pages\">Github Pages를 위한 퍼블리싱 소스 설정을 참조</a>하라.</p>\n</blockquote>\n<p>e-for-github-pages)하라.</p>\n<blockquote>\n<p>만일 <a href=\"https://help.github.com/articles/using-a-custom-domain-with-github-pages\">커스텀 도메인</a>이 사용되지 않으면, 프로젝트 페이지는 유저 페이지의 하위 패스 하에 퍼블리시 된다. <code>username.github.io/projectName</code></p>\n</blockquote>\n<blockquote>\n<p>유저/조직 페이지 사이트상의 커스텀 도메인은 같은 도메인 리디렉션을 해당 계정하에서 호스트되고 있는 모든 프로젝트 페이지 사이트에 적용한다. 커스텀 도메인을 사용하는 프로젝트 페이지 사이트는 또한 개인유저는 <code>username.github.io/projectName</code> 으로, 조직계정은  <code>organizationName.github.io/projectName</code>으로 이용가능하다.</p>\n</blockquote>\n<blockquote>\n<p>커스텀 404s 는 오직 커스텀 도메인이 사용된다는 조건일때 작동한다. 그렇지 않으면 유저 페이지 404가 사용된다.</p>\n</blockquote>\n<blockquote>\n<p>경고 : 유저이름 또는 조직이름이 dash(-) 로 시작하거나 끝나는, 또는 연속 dash(--) 를 포함하고 있으면, Linux를 사용하는 사람들은 사이트 방문시 서버에러를 받는다. 이를 해결하기 위해 Github 계정명을 변경해라. <a href=\"https://help.github.com/articles/changing-your-github-username/\">계정변경하기</a></p>\n</blockquote>\n<hr>\n<h2 id=\"배포-키\"><a href=\"#%EB%B0%B0%ED%8F%AC-%ED%82%A4\" class=\"phenomic-HeadingAnchor\">#</a>배포 키</h2>\n<p>배포 키는 당신의 서버에 저장되고 해당 <code>Github</code> 저장소에 접근권한을 부여하는 <code>SSH</code> 키이다. 이 키는 개인 유저 계정 대신 저장소에 직접 결속된다.</p>\n<p><strong>장점</strong></p>\n<p>저장소와 서버에 접근권한을 갖는 누구나 프로젝트에 배포할 수 있는 능력을 갖는다. 유저들은 그들의 로컬 <code>SSH</code> 셋팅을 변경할 필요가 없다.\n배포 키는 디폴트로 읽기/쓰기가 가능하지만 <code>read-only</code> 로 만들 수도 있다.</p>\n<p><strong>단점</strong></p>\n<p>배포키는 오직 단일 저장소에 대한 접근권한을 부여한다. 보다 복잡한 프로젝트는 같은 서버에 대한 pull할 많은 저장소를 갖을 수 있다.\n배포 키들은 서버가 손상됬을지라도 쉽게 접근가능하도록 만들기 때문에, 보통 <code>passphrase</code>에 의해 보호되지 않는다.</p>\n<h3 id=\"setup\"><a href=\"#setup\" class=\"phenomic-HeadingAnchor\">#</a>Setup</h3>\n<ol>\n<li>\n<p>당신의 서버상에 <a href=\"https://help.github.com/articles/generating-an-ssh-key/\"><code>ssh-keygen</code>을 작동</a>시켜라.</p>\n</li>\n<li>\n<p>로그인 후 <code>GitHub</code> 사이트의 상단 오른쪽 구석에, 당신의 프로필 사진을 클릭해라.</p>\n</li>\n<li>\n<p>당신의 프로필 페이지에서, <code>Repositories</code> 탭을 클릭하고, 당신의 저장소 이름을 클릭해라.</p>\n</li>\n<li>\n<p>저장소의 오른쪽 사이드바에서, <code>Settings</code> 버튼을 클릭해라.</p>\n</li>\n<li>\n<p>사이드바에서, <code>Deploy Keys</code>을 클릭해라.</p>\n</li>\n<li>\n<p><code>Add deploy key</code>를 클릭해라. 당신의 퍼블릭 키를 입력하고 제출해라.</p>\n</li>\n</ol>\n<h3 id=\"ssh-키-생성-for-mac\"><a href=\"#ssh-%ED%82%A4-%EC%83%9D%EC%84%B1-for-mac\" class=\"phenomic-HeadingAnchor\">#</a>SSH 키 생성 (for Mac)</h3>\n<p><code>SSH</code> 키는 패스워드와 관계없이 신뢰할만한 컴퓨터를 식별하는 하나의 방식이다. 이 섹션에서 다루고 있는 절차를 따라서 <code>SSH</code> 키를 생성하고 공개 키를 당신의 Github 계정에 추가할 수 있다.</p>\n<p>정기적으로 당신의 <a href=\"https://help.github.com/articles/keeping-your-ssh-keys-and-application-access-tokens-safe/\"><code>SSH</code> 키 리스트를 리뷰</a>해보고 사용되지 않는 키를 파기할 것을 추천한다.</p>\n<blockquote>\n<p>Tip: GitHub has a desktop client! Most of your work can be done in the desktop client rather than in the command line.</p>\n</blockquote>\n<h4 id=\"기존에-가지고-있는-ssh-키-체크하기-for-mac\"><a href=\"#%EA%B8%B0%EC%A1%B4%EC%97%90-%EA%B0%80%EC%A7%80%EA%B3%A0-%EC%9E%88%EB%8A%94-ssh-%ED%82%A4-%EC%B2%B4%ED%81%AC%ED%95%98%EA%B8%B0-for-mac\" class=\"phenomic-HeadingAnchor\">#</a>기존에 가지고 있는 <code>SSH</code> 키 체크하기 (for Mac)</h4>\n<p><a href=\"https://help.github.com/articles/checking-for-existing-ssh-keys/\">https://help.github.com/articles/checking-for-existing-ssh-keys/</a></p>\n<p>신규 <code>SSH</code> 키를 생성하기 전에, 기존에 사용하던 <code>SSH</code> 키가 있는지 체크할 수 있다.</p>\n<ol>\n<li>Terminal App 실행</li>\n<li><code>ls -al ~/.ssh</code> 입력하고 존재하는지 확인</li>\n<li>\n<p>디폴트로 공개키의 파일이름은 다음 중 하나이다.</p>\n<blockquote>\n<p>id_dsa.pub\nid_ecdsa.pub\nid_ed25519.pub</p>\n</blockquote>\n</li>\n</ol>\n<blockquote>\n<p>id_rsa.pub</p>\n</blockquote>\n<p>만일 public, private 키 쌍이 존재하지 않으면 <a href=\"https://help.github.com/articles/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent\">새로운 SSH 키를 생성</a>한다.</p>\n<p>만일 기존 키 쌍이 존재하면 <code>Github</code>와 연결할 수 있다. <a href=\"https://help.github.com/articles/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent/#adding-your-ssh-key-to-the-ssh-agent\"><code>SSH</code> 키를 <code>ssh-agent</code>에 추가</a>하자.</p>\n<blockquote>\n<p>Tip: If you receive an error that ~/.ssh doesn't exist, don't worry! We'll create it when we generate a new SSH key.</p>\n</blockquote>\n<h3 id=\"신규-ssh-키를-생성하고-이것을-ssh-agent-에-추가하기for-mac\"><a href=\"#%EC%8B%A0%EA%B7%9C-ssh-%ED%82%A4%EB%A5%BC-%EC%83%9D%EC%84%B1%ED%95%98%EA%B3%A0-%EC%9D%B4%EA%B2%83%EC%9D%84-ssh-agent-%EC%97%90-%EC%B6%94%EA%B0%80%ED%95%98%EA%B8%B0for-mac\" class=\"phenomic-HeadingAnchor\">#</a>신규 SSH 키를 생성하고 이것을 <code>ssh-agent</code> 에 추가하기(for Mac)</h3>\n<ol>\n<li>Terminal 열기</li>\n<li>아래 텍스트에서 당신의 Github 가입 시 인증된 이메일 주소를 바꿔 붙여넣는다.</li>\n</ol>\n<pre><code class=\"hljs language-bash\">ssh-keygen -t rsa -b 4096 -C <span class=\"hljs-string\">\"your_email@example.com\"</span>\n<span class=\"hljs-comment\"># Creates a new ssh key, using the provided email as a label</span>\nGenerating public/private rsa key pair.</code></pre>\n<ol start=\"3\">\n<li>\n<p>\"Enter a file in which to save the key(/Users/you/.ssh/id_rsa)\" 라는 메시지와 함께 input을 입력받는 Prompt가 나오면 Enter키를 누른다. 이것은 디폴트 파일 위치를 입력받는다.</p>\n</li>\n<li>\n<p>프롬프트에서, 보안 <code>passphrase</code>를 타이핑한다. 보다 많은 정보를 위해 <a href=\"https://help.github.com/articles/working-with-ssh-key-passphrases\">Working with SSH key passphrases</a> 를 참조하라.</p>\n</li>\n</ol>\n<p><code>passphrase</code>는 <code>SSH</code> 키에 보안 레이어를 하나 추가하는 것이다.</p>\n<p>하지만 키를 사용할 때마다 긴 <code>passphrase</code>를 입력하고 싶지 않을 것이다.</p>\n<p><code>ssh-agent</code>라는 툴이 있는데 여기에 <code>passphrase</code>를 저장해 두고 다시 그것을 입력하지 않도록 할 수 있다. 대부분의 Linux 인스톨은 자동으로 <code>ssh-agent</code>를 당신이 로그인할때 자동으로 시작할 것이다.</p>\n<h4 id=\"passphrase-추가와-변경\"><a href=\"#passphrase-%EC%B6%94%EA%B0%80%EC%99%80-%EB%B3%80%EA%B2%BD\" class=\"phenomic-HeadingAnchor\">#</a><code>passphrase</code> 추가와 변경</h4>\n<p>키 쌍의 재성성 없이 기존의 private 키를 위한 <code>passphrase</code>를 변경할 수 있다. 그저 다음 커맨드를 입력하라.</p>\n<pre><code class=\"hljs language-bash\">ssh-keygen -p <span class=\"hljs-comment\">#old passphrase</span>\n<span class=\"hljs-comment\"># Start the SSH key creation process</span>\nEnter file <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">which</span> the key is (/Users/you/.ssh/id_rsa): [Hit enter]\nKey has comment <span class=\"hljs-string\">'/Users/you/.ssh/id_rsa'</span>\nEnter new passphrase (empty <span class=\"hljs-keyword\">for</span> no passphrase): [Type new passphrase]\nEnter same passphrase again: [One more time <span class=\"hljs-keyword\">for</span> luck]\nYour identification has been saved with the new passphrase.</code></pre>\n<p><code>-p</code> : Requests changing the passphrase of a private key file instead of creating a new private key.  The program will prompt for the file containing the private key, for the old passphrase, and twice for the new passphrase.</p>\n<blockquote>\n<p>주의) 해당 키가 이미 <code>passphrase</code>를 가지고 있다면, 새로운 것으로 변경하기 전에 이전 것을 한번 입력해야한다.</p>\n</blockquote>\n<h4 id=\"mac-os-키체인\"><a href=\"#mac-os-%ED%82%A4%EC%B2%B4%EC%9D%B8\" class=\"phenomic-HeadingAnchor\">#</a>Mac OS 키체인</h4>\n<p>OS X Leopard 이후 버전이면, <code>ssh-agent</code> 툴은 자동으로 작동한다. 그리고 또한 키체인과 함께 통합될 것이다. 그래서 이 키체인으로 당신의 키를 해제할 수 있다. 이것은 CLI보다 몇 가지 주요 이점이 있다. 당신의 input을 로우레벨 키보드 루틴 또는 유니버셜 접근에 의해 스파이 되거나 복사될 수 있는 것으로 부터 보호한다.</p>\n<p>디폴트 private 키 파일들(<code>.ssh/id_rsa</code>, <code>.ssh/id_dsa</code>, <code>ssh/identity</code>) 는 자동으로 처리된다. 만일 다른 이름을 갖는 <code>private</code> 키를 가지고 있다면, 그것을 <code>ssh-add -K path/to/my_key</code>를 입력해서 추가해줘야한다.</p>\n<p><code>-K</code> : When adding identities, each passphrase will also be stored in your keychain.  When removing identities with <code>-d</code>, each passphrase will be removed from your keychain.</p>\n<blockquote>\n<p>Tip: Make sure you're using the default OS X <code>ssh-add</code> command, and not one installed by <code>macports</code>, <code>homebrew</code>, or some other external source.</p>\n</blockquote>\n<p>처음 키를 사용할 때 <code>passphrase</code> 입력 팝업이 뜬다.</p>\n<p>만일 키체인에 passphrass 저장하기 체크박스를 체크하면 그것을 다시 입력할 필요가 없다. 대신, 간단히 키체인 잠김을 해제하기만 하면 될 것이다.  (<a href=\"http://www.dribin.org/dave/blog/archives/2007/11/28/securing_ssh_agent/\">키체인 sleep 모드 시 잠김현상 가이드</a>)</p>\n<p><strong>passphrase</strong>\nA passphrase is a sequence of words or other text used to control access to a computer system, program or data. A passphrase is similar to a password in usage, but is generally longer for added security. Passphrases are often used to control both access to, and operation of, cryptographic programs and systems, especially those that derive an encryption key from a passphrase. The origin of the term is by analogy with password. The modern concept of passphrases is believed to have been invented by Sigmund N. Porter in 1982.</p>\n<h3 id=\"ssh-키-ssh-agent-에-추가하기\"><a href=\"#ssh-%ED%82%A4-ssh-agent-%EC%97%90-%EC%B6%94%EA%B0%80%ED%95%98%EA%B8%B0\" class=\"phenomic-HeadingAnchor\">#</a>SSH 키 ssh-agent` 에 추가하기</h3>\n<ol>\n<li>터미널을 열고 <code>ssh-agent</code>가 백그라운드에서 시작했는지 확인</li>\n</ol>\n<pre><code class=\"hljs language-bash\"><span class=\"hljs-built_in\">eval</span> <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$(ssh-agent -s)</span>\"</span>\n<span class=\"hljs-comment\"># Agent pid 45878</span></code></pre>\n<ol start=\"2\">\n<li>SSH 키를 ssh-agent에 추가해라. 기존 private 키 파일의 이름으로 <code>id_rsa</code> 를 대체하라.</li>\n</ol>\n<pre><code class=\"hljs language-bash\">ssh-add ~/.ssh/id_rsa</code></pre>\n<ol start=\"3\">\n<li><a href=\"https://help.github.com/articles/adding-a-new-ssh-key-to-your-github-account\">Github 계정에 SSH 키 추가하기</a> (공개키 추가)</li>\n</ol>\n<h2 id=\"신규-ssh-키-github-계정에-추가하기-for-mac\"><a href=\"#%EC%8B%A0%EA%B7%9C-ssh-%ED%82%A4-github-%EA%B3%84%EC%A0%95%EC%97%90-%EC%B6%94%EA%B0%80%ED%95%98%EA%B8%B0-for-mac\" class=\"phenomic-HeadingAnchor\">#</a>신규 SSH 키 Github 계정에 추가하기 (for Mac)</h2>\n<ol>\n<li>SSH 공개키를 클립보드에 복사</li>\n</ol>\n<pre><code class=\"hljs language-bash\">pbcopy &#x3C; ~/.ssh/id_rsa.pub\n<span class=\"hljs-comment\"># Copies the contents of the `id_rsa.pub` file to your clipboard</span></code></pre>\n<blockquote>\n<p>Tip: If pbcopy isn't working, you can locate the hidden .ssh folder, open the file in your favorite text editor, and copy it to your clipboard.</p>\n</blockquote>\n<ol start=\"2\">\n<li>페이지 오른쪽 상단 구석의 프로필 사진을 클릭하고 <code>Settings</code> 버튼을 클릭한다.</li>\n<li>유저 설정페이지의 사이드바에서 <code>SSH and GPG keys</code>를 클릭한다.</li>\n<li><code>New SSH key</code> 또는 <code>Add SSH key</code>를 클릭</li>\n<li>'Title' 필드에 새로 추가하는 키에 대해 설명하는 라벨을 추가한다. 예를들면, 개인 Mac을 사용하고 있다면 이 키는 \"Personal MacBook Pro\" 라 부를 수 있을 것이다.</li>\n<li>클립보드에 복사한 공개키를 'Key' 필드에 붙여넣어라.</li>\n<li><code>Add SSH key</code> 버튼 클릭</li>\n<li>Github 패스워드 한번 더 입력</li>\n</ol>\n<h3 id=\"ssh-연결-테스트\"><a href=\"#ssh-%EC%97%B0%EA%B2%B0-%ED%85%8C%EC%8A%A4%ED%8A%B8\" class=\"phenomic-HeadingAnchor\">#</a>SSH 연결 테스트</h3>\n<ol>\n<li>터미널 열기</li>\n</ol>\n<pre><code class=\"hljs language-bash\">ssh -T git@github.com\n<span class=\"hljs-comment\"># Attempts to ssh to GitHub</span></code></pre>\n<p>아래와 같은 경고화면을 볼 것이다.</p>\n<pre><code class=\"hljs language-bash\">The authenticity of host <span class=\"hljs-string\">'github.com (192.30.252.1)'</span> can<span class=\"hljs-string\">'t be established.\nRSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.\nAre you sure you want to continue connecting (yes/no)?\n\nThe authenticity of host '</span>github.com (192.30.252.1)<span class=\"hljs-string\">' can'</span>t be established.\n\nRSA key fingerprint is nThbg6kXUpJWGl7E1IGOCspRomTxdCARLviKw6E5SY8.\nAre you sure you want to <span class=\"hljs-built_in\">continue</span> connecting (yes/no)?</code></pre>\n<p><strong>실제 경고화면</strong></p>\n<pre><code>Warning: Permanently added the RSA host key for IP address '192.30.253.112' to the list of known hosts.\n</code></pre>\n<blockquote>\n<p>Note: The example above lists the GitHub IP address as <code>192.30.252.1</code>. When pinging GitHub, you may see a range of IP addresses. For more information, see <a href=\"https://help.github.com/articles/what-ip-addresses-does-github-use-that-i-should-whitelist\">\"What IP addresses does GitHub use that I should whitelist?\"</a></p>\n</blockquote>\n<ol start=\"3\">\n<li>Verify that the fingerprint in the message you see matches the following message, then type <code>yes</code>:</li>\n</ol>\n<pre><code class=\"hljs language-bash\">Hi username! You<span class=\"hljs-string\">'ve successfully authenticated, but GitHub does not\nprovide shell access.</span></code></pre>\n<ol start=\"4\">\n<li>\n<p>Verify that the resulting message contains your username. If you see a message that contains <code>\"access denied,\"</code> see <a href=\"https://help.github.com/articles/error-permission-denied-publickey\">\"Error: Permission denied (publickey)</a>.\nIf you receive a message about <code>\"access denied,\"</code> you can <a href=\"https://help.github.com/articles/error-permission-denied-publickey\">read these instructions for diagnosing the issue</a>.</p>\n</li>\n<li>\n<p>If you're switching from HTTPS to SSH, you'll need to <a href=\"https://help.github.com/articles/changing-a-remote-s-url\">update your remote repository URLs</a>.</p>\n</li>\n</ol>\n","rawBody":"\nsource: https://help.github.com/articles/user-organization-and-project-pages/\n\nblog starter kit: https://github.com/gatsbyjs/gatsby\n\n## User/Organization 와 Project Pages\n\nGithub 페이지는 2가지 기본 타입이 존재한다 : User/Organization 페이지와 프로젝트 페이지.\n\n이것들은 거의 동일하지만, 이들 사이에는 몇 가지 중요한 차이점이 있다.\n\n2016년 7월 15일 이후에 생성되고, `github.io` 도메인을 사용하는 Github 페이지는 `https` 상에서 수행된다.\n\n> Tip: GitHub Pages sites shouldn't be used for sensitive transactions like sending passwords or credit card numbers.\n\n페이지는 퍼블리시될때 저장소가 `private` 할지라도, 항상 공개적으로 접근가능하다는 점을 명심하라.\n\n|타입|페이지 도메인 & Github 저장소 이름|페이지 사이트 생성을 위한 소스파일 위치|\n| :-: | :-| :-: |\n| 일반유저계정 페이지     |`username.github.io`|  `master`  |\n| 회사계정 페이지        |`organizationName.github.io`|  `master`  |\n|일반유저가 소유한 프로젝트 페이지 |`username.github.io/projectName`|`master`, `gh-pages`, 또는 `master` 브랜치의 `/docs` 폴더|\n|회사가 소유한 프로젝트 페이지|`organizationName.github.io/prjectName`|`master`, `gh-pages`, 또는 `master` 브랜치의 `/docs` 폴더|\n\n\nGithub 페이지 사이트를 커스텀 도메인으로 리디렉션 하는 방법을 배우려면, [커스텀 도메인 리디렉션 차트](https://help.github.com/articles/custom-domain-redirects-for-github-pages-sites)를 봐라.\n\n\n### User & Organization 페이지\n\nUser & Organization 페이지는 Github 페이지 파일 전용의 특별한 저장소에 존재하게 된다. 이 저장소 이름을 계정이름으로 네이밍해야할 것이다.\n\n반드시 저장소 이름을 `username.github.io`로 해야한다. `master` 브랜치에 있는 컨텐츠가 Github 페이지 사이트를 생성하고 퍼블리시하는 데 사용된다. User & Organization 페이지를 위해 오직 자신의 계정이름을 사용할 수 있다.\n\n유저 페이지가 생성되면, `http(s)://<username>.github.io` 주소가 이용가능할 것이다.\n\n#### User & Organization 페이지 만들기\n\n회원가입 후 이메일 인증을 한 유저는 유저 페이지를 생성할 수 있다.\n\n페이지는 또한 [배포 키](https://developer.github.com/guides/managing-deploy-keys/#deploy-keys)를 사용해서 프로세스를 자동화할 수 있다.\n\n회사 페이지는 인증된 이메일 주소와 저장소에 푸시 권한을 가지고 있는 멤버 누구라도 만들 수 있다. 빌드 자동화를 위해, [당신의 조직을 하나의 멤버로써 머신 유저를 셋팅](https://developer.github.com/guides/managing-deploy-keys/#machine-users)할 수 있다. 배포 키는 조직 페이지를 위해 지원되지 않는다.\n\n### 프로젝트 페이지\n\n유저와 회사 페이지와 달리, 프로젝트 페이지는 해당 프로젝트와 동일한 저장소에 유지된다. 일반유저 계정과 조직 계정은 프로젝트 페이지를 생성할 수 있다. 개인 개정의 프로젝트 페이지에 대한 URL은 `http(s)://<username>.github.io/<projectName>` 인 반면, 조직계정의 프로젝트 페이지 URL은 `http(s)://<organization>.github.io/<projectName>` 일 것이다. 프로젝트 페이지에 대한 단계는 둘 다 같다.\n\n프로젝트 페이지는 유저와 조직 페이지에서 유사하지만 약간의 차이가 있다.\n\n> 프로젝트 페이지 사이트를 `master` 또는 `gh-pages` 브랜치로부터 생성하고 퍼블리시 할 수 있다. `master` 브랜치상에서 퍼블리시 하려면 `/docs` 폴더로부터 사이트를 퍼블리시 해야한다. 더 많은 정보를 위해 [Github Pages를 위한 퍼블리싱 소스 설정을 참조](https://help.github.com/articles/configuring-a-publishing-source-for-github-pages)하라.\n\ne-for-github-pages)하라.\n\n> 만일 [커스텀 도메인](https://help.github.com/articles/using-a-custom-domain-with-github-pages)이 사용되지 않으면, 프로젝트 페이지는 유저 페이지의 하위 패스 하에 퍼블리시 된다. `username.github.io/projectName`\n\n> 유저/조직 페이지 사이트상의 커스텀 도메인은 같은 도메인 리디렉션을 해당 계정하에서 호스트되고 있는 모든 프로젝트 페이지 사이트에 적용한다. 커스텀 도메인을 사용하는 프로젝트 페이지 사이트는 또한 개인유저는 `username.github.io/projectName` 으로, 조직계정은  `organizationName.github.io/projectName`으로 이용가능하다.\n\n> 커스텀 404s 는 오직 커스텀 도메인이 사용된다는 조건일때 작동한다. 그렇지 않으면 유저 페이지 404가 사용된다.\n\n> 경고 : 유저이름 또는 조직이름이 dash(-) 로 시작하거나 끝나는, 또는 연속 dash(--) 를 포함하고 있으면, Linux를 사용하는 사람들은 사이트 방문시 서버에러를 받는다. 이를 해결하기 위해 Github 계정명을 변경해라. [계정변경하기](https://help.github.com/articles/changing-your-github-username/)\n\n-------------------------------------------------------\n\n\n## 배포 키\n\n배포 키는 당신의 서버에 저장되고 해당 `Github` 저장소에 접근권한을 부여하는 `SSH` 키이다. 이 키는 개인 유저 계정 대신 저장소에 직접 결속된다.\n\n**장점**\n\n저장소와 서버에 접근권한을 갖는 누구나 프로젝트에 배포할 수 있는 능력을 갖는다. 유저들은 그들의 로컬 `SSH` 셋팅을 변경할 필요가 없다.\n배포 키는 디폴트로 읽기/쓰기가 가능하지만 `read-only` 로 만들 수도 있다.\n\n**단점**\n\n배포키는 오직 단일 저장소에 대한 접근권한을 부여한다. 보다 복잡한 프로젝트는 같은 서버에 대한 pull할 많은 저장소를 갖을 수 있다.\n배포 키들은 서버가 손상됬을지라도 쉽게 접근가능하도록 만들기 때문에, 보통 `passphrase`에 의해 보호되지 않는다.\n\n### Setup\n\n1. 당신의 서버상에 [`ssh-keygen`을 작동](https://help.github.com/articles/generating-an-ssh-key/)시켜라.\n\n2. 로그인 후 `GitHub` 사이트의 상단 오른쪽 구석에, 당신의 프로필 사진을 클릭해라.\n\n3. 당신의 프로필 페이지에서, `Repositories` 탭을 클릭하고, 당신의 저장소 이름을 클릭해라.\n\n4. 저장소의 오른쪽 사이드바에서, `Settings` 버튼을 클릭해라.\n\n5. 사이드바에서, `Deploy Keys`을 클릭해라.\n\n6. `Add deploy key`를 클릭해라. 당신의 퍼블릭 키를 입력하고 제출해라.\n\n\n### SSH 키 생성 (for Mac)\n\n`SSH` 키는 패스워드와 관계없이 신뢰할만한 컴퓨터를 식별하는 하나의 방식이다. 이 섹션에서 다루고 있는 절차를 따라서 `SSH` 키를 생성하고 공개 키를 당신의 Github 계정에 추가할 수 있다.\n\n정기적으로 당신의 [`SSH` 키 리스트를 리뷰](https://help.github.com/articles/keeping-your-ssh-keys-and-application-access-tokens-safe/)해보고 사용되지 않는 키를 파기할 것을 추천한다.\n\n>Tip: GitHub has a desktop client! Most of your work can be done in the desktop client rather than in the command line.\n\n#### 기존에 가지고 있는 `SSH` 키 체크하기 (for Mac)\n\nhttps://help.github.com/articles/checking-for-existing-ssh-keys/\n\n신규 `SSH` 키를 생성하기 전에, 기존에 사용하던 `SSH` 키가 있는지 체크할 수 있다.\n\n1. Terminal App 실행\n2. `ls -al ~/.ssh` 입력하고 존재하는지 확인\n3. 디폴트로 공개키의 파일이름은 다음 중 하나이다.\n> id_dsa.pub\n> id_ecdsa.pub\n> id_ed25519.pub\n\n>id_rsa.pub\n\n만일 public, private 키 쌍이 존재하지 않으면 [새로운 SSH 키를 생성](https://help.github.com/articles/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent)한다.\n\n만일 기존 키 쌍이 존재하면 `Github`와 연결할 수 있다. [`SSH` 키를 `ssh-agent`에 추가](https://help.github.com/articles/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent/#adding-your-ssh-key-to-the-ssh-agent)하자.\n\n> Tip: If you receive an error that ~/.ssh doesn't exist, don't worry! We'll create it when we generate a new SSH key.\n\n\n### 신규 SSH 키를 생성하고 이것을 `ssh-agent` 에 추가하기(for Mac)\n\n1. Terminal 열기\n2. 아래 텍스트에서 당신의 Github 가입 시 인증된 이메일 주소를 바꿔 붙여넣는다.\n\n```bash\nssh-keygen -t rsa -b 4096 -C \"your_email@example.com\"\n# Creates a new ssh key, using the provided email as a label\nGenerating public/private rsa key pair.\n```\n\n3. \"Enter a file in which to save the key(/Users/you/.ssh/id_rsa)\" 라는 메시지와 함께 input을 입력받는 Prompt가 나오면 Enter키를 누른다. 이것은 디폴트 파일 위치를 입력받는다.\n\n4.  프롬프트에서, 보안 `passphrase`를 타이핑한다. 보다 많은 정보를 위해 [Working with SSH key passphrases](https://help.github.com/articles/working-with-ssh-key-passphrases) 를 참조하라.\n\n`passphrase`는 `SSH` 키에 보안 레이어를 하나 추가하는 것이다.\n\n하지만 키를 사용할 때마다 긴 `passphrase`를 입력하고 싶지 않을 것이다.\n\n`ssh-agent`라는 툴이 있는데 여기에 `passphrase`를 저장해 두고 다시 그것을 입력하지 않도록 할 수 있다. 대부분의 Linux 인스톨은 자동으로 `ssh-agent`를 당신이 로그인할때 자동으로 시작할 것이다.\n\n#### `passphrase` 추가와 변경\n\n키 쌍의 재성성 없이 기존의 private 키를 위한 `passphrase`를 변경할 수 있다. 그저 다음 커맨드를 입력하라.\n\n```bash\nssh-keygen -p #old passphrase\n# Start the SSH key creation process\nEnter file in which the key is (/Users/you/.ssh/id_rsa): [Hit enter]\nKey has comment '/Users/you/.ssh/id_rsa'\nEnter new passphrase (empty for no passphrase): [Type new passphrase]\nEnter same passphrase again: [One more time for luck]\nYour identification has been saved with the new passphrase.\n```\n\n`-p` : Requests changing the passphrase of a private key file instead of creating a new private key.  The program will prompt for the file containing the private key, for the old passphrase, and twice for the new passphrase.\n\n> 주의) 해당 키가 이미 `passphrase`를 가지고 있다면, 새로운 것으로 변경하기 전에 이전 것을 한번 입력해야한다.\n\n\n#### Mac OS 키체인\n\nOS X Leopard 이후 버전이면, `ssh-agent` 툴은 자동으로 작동한다. 그리고 또한 키체인과 함께 통합될 것이다. 그래서 이 키체인으로 당신의 키를 해제할 수 있다. 이것은 CLI보다 몇 가지 주요 이점이 있다. 당신의 input을 로우레벨 키보드 루틴 또는 유니버셜 접근에 의해 스파이 되거나 복사될 수 있는 것으로 부터 보호한다.\n\n디폴트 private 키 파일들(`.ssh/id_rsa`, `.ssh/id_dsa`, `ssh/identity`) 는 자동으로 처리된다. 만일 다른 이름을 갖는 `private` 키를 가지고 있다면, 그것을 `ssh-add -K path/to/my_key`를 입력해서 추가해줘야한다.\n\n`-K` : When adding identities, each passphrase will also be stored in your keychain.  When removing identities with `-d`, each passphrase will be removed from your keychain.\n\n> Tip: Make sure you're using the default OS X `ssh-add` command, and not one installed by `macports`, `homebrew`, or some other external source.\n\n처음 키를 사용할 때 `passphrase` 입력 팝업이 뜬다.\n\n만일 키체인에 passphrass 저장하기 체크박스를 체크하면 그것을 다시 입력할 필요가 없다. 대신, 간단히 키체인 잠김을 해제하기만 하면 될 것이다.  ([키체인 sleep 모드 시 잠김현상 가이드](http://www.dribin.org/dave/blog/archives/2007/11/28/securing_ssh_agent/))\n\n**passphrase**\nA passphrase is a sequence of words or other text used to control access to a computer system, program or data. A passphrase is similar to a password in usage, but is generally longer for added security. Passphrases are often used to control both access to, and operation of, cryptographic programs and systems, especially those that derive an encryption key from a passphrase. The origin of the term is by analogy with password. The modern concept of passphrases is believed to have been invented by Sigmund N. Porter in 1982.\n\n### SSH 키 ssh-agent` 에 추가하기\n\n1. 터미널을 열고 `ssh-agent`가 백그라운드에서 시작했는지 확인\n```bash\neval \"$(ssh-agent -s)\"\n# Agent pid 45878\n```\n\n2. SSH 키를 ssh-agent에 추가해라. 기존 private 키 파일의 이름으로 `id_rsa` 를 대체하라.\n```bash\nssh-add ~/.ssh/id_rsa\n```\n\n3. [Github 계정에 SSH 키 추가하기](https://help.github.com/articles/adding-a-new-ssh-key-to-your-github-account) (공개키 추가)\n\n\n\n## 신규 SSH 키 Github 계정에 추가하기 (for Mac)\n\n1. SSH 공개키를 클립보드에 복사\n\n```bash\npbcopy < ~/.ssh/id_rsa.pub\n# Copies the contents of the `id_rsa.pub` file to your clipboard\n```\n\n> Tip: If pbcopy isn't working, you can locate the hidden .ssh folder, open the file in your favorite text editor, and copy it to your clipboard.\n\n2. 페이지 오른쪽 상단 구석의 프로필 사진을 클릭하고 `Settings` 버튼을 클릭한다.\n3. 유저 설정페이지의 사이드바에서 `SSH and GPG keys`를 클릭한다.\n4. `New SSH key` 또는 `Add SSH key`를 클릭\n5. 'Title' 필드에 새로 추가하는 키에 대해 설명하는 라벨을 추가한다. 예를들면, 개인 Mac을 사용하고 있다면 이 키는 \"Personal MacBook Pro\" 라 부를 수 있을 것이다.\n6. 클립보드에 복사한 공개키를 'Key' 필드에 붙여넣어라.\n7. `Add SSH key` 버튼 클릭\n8. Github 패스워드 한번 더 입력\n\n### SSH 연결 테스트\n\n1. 터미널 열기\n\n```bash\nssh -T git@github.com\n# Attempts to ssh to GitHub\n```\n\n아래와 같은 경고화면을 볼 것이다.\n\n```bash\nThe authenticity of host 'github.com (192.30.252.1)' can't be established.\nRSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.\nAre you sure you want to continue connecting (yes/no)?\n\nThe authenticity of host 'github.com (192.30.252.1)' can't be established.\n\nRSA key fingerprint is nThbg6kXUpJWGl7E1IGOCspRomTxdCARLviKw6E5SY8.\nAre you sure you want to continue connecting (yes/no)?\n```\n\n**실제 경고화면**\n\n```\nWarning: Permanently added the RSA host key for IP address '192.30.253.112' to the list of known hosts.\n```\n\n> Note: The example above lists the GitHub IP address as `192.30.252.1`. When pinging GitHub, you may see a range of IP addresses. For more information, see [\"What IP addresses does GitHub use that I should whitelist?\"](https://help.github.com/articles/what-ip-addresses-does-github-use-that-i-should-whitelist)\n\n3. Verify that the fingerprint in the message you see matches the following message, then type `yes`:\n\n```bash\nHi username! You've successfully authenticated, but GitHub does not\nprovide shell access.\n```\n\n4. Verify that the resulting message contains your username. If you see a message that contains `\"access denied,\"` see [\"Error: Permission denied (publickey)](https://help.github.com/articles/error-permission-denied-publickey).\nIf you receive a message about `\"access denied,\"` you can [read these instructions for diagnosing the issue](https://help.github.com/articles/error-permission-denied-publickey).\n\n5. If you're switching from HTTPS to SSH, you'll need to [update your remote repository URLs](https://help.github.com/articles/changing-a-remote-s-url).\n","__filename":"en/articles/git/github/gh-pages.md","__url":"/en/articles/git/github/gh-pages/","__resourceUrl":"/en/articles/git/github/gh-pages/index.html","__dataUrl":"/en/articles/git/github/gh-pages/index.html.a59495ef8329c7fd9534aeb3a2af4932.json"}